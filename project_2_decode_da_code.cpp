# -*- coding: utf-8 -*-
"""Project #2: Decode Da Code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D0zZEFVHL17OqCYHNs62aT7fbN-1v2q-
"""

#include <iostream>
#include <fstream>
using namespace std;

int main() {
   string filename, mode;
   string otpContent;
   char textChar, otpChar, resultChar;
   ifstream otpFile;

   // File name
   cout << "Which file would you like to use? ";
   cin >> filename;

   // Open OTP file and read contents
   otpFile.open(filename.c_str());
   if (!otpFile) {
      cout << "Error: Cannot open file." << endl;
      return 0;
   }

   // Read file into otpContent
   char ch;
   while (otpFile >> ch) {
      otpContent += ch;
   }
   otpFile.close();

   // Encryption/decryption mode
   cout << "Would you like to (E)ncrypt or (D)ecrypt? ";
   cin >> mode;
   cin.ignore();

   // Input message
   if (mode == "E" || mode == "e") {
      cout << "Enter the plain text string: ";
   } else if (mode == "D" || mode == "d") {
      cout << "Enter the cypher text string: ";
   } else {
      cout << "Invalid mode selected." << endl;
      return 1;
   }

   string message;
   getline(cin, message);

   // Encrypt or decrypt each character
   for (size_t i = 0; i < message.size(); ++i) {
      textChar = message[i];
      otpChar = otpContent[i];

   // Map characters from [32-126] to [0-94]
  int textMapped = textChar - 32;
  int otpMapped = otpChar - 32;

  if (mode == "E" || mode == "e") {
      // Encryption: Add and wrap using mod 95
      int cipherMapped = (textMapped + otpMapped) % 95;
      resultChar = static_cast<char>(cipherMapped + 32);  // Map back to [32-126]
  } else {
      // Decryption: Subtract and wrap using mod 95
      int plainMapped = (textMapped - otpMapped + 95) % 95;
      resultChar = static_cast<char>(plainMapped + 32);  // Map back to [32-126]
  }

   //Result
   cout << resultChar;
   }
   cout << endl;

   return 0;
}
