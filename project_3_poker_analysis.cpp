# -*- coding: utf-8 -*-
"""Project #3:  Poker Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D0zZEFVHL17OqCYHNs62aT7fbN-1v2q-
"""

#include <iostream>
#include <iomanip>
#include <string>
#include <cstdlib>
#include <ctime>
using namespace std;

// Constants
const int DECK_SIZE = 52;
const int HAND_SIZE = 5;
const int SHUFFLE_COUNT = 676;

// Functions
string card(int);
void shuffle(int[], int);
void deal(int[], int[]);
void sort(int[]);
int analyzeHand(int[]);
void displayHand(const int[]);

int main() {
   int deck[DECK_SIZE], hand[HAND_SIZE];
   int seed, numHands;

   // Initialize the deck
   for (int i = 0; i < DECK_SIZE; ++i) {
      deck[i] = i;
   }

   //random seed
   cout << "Enter the seed value :   ";
   cin >> seed;
   srand(seed);

   //5 sorted hands
   for (int i = 0; i < 5; ++i) {
      shuffle(deck, SHUFFLE_COUNT);
      deal(deck, hand);
      sort(hand);
      displayHand(hand);
   }

   //number of hands
   cout << "Enter the number of hands : ";
   cin >> numHands;

   // Analyze the hands
   int counts[9] = {0};
   for (int i = 0; i < numHands; ++i) {
      shuffle(deck, SHUFFLE_COUNT);
      deal(deck, hand);
      sort(hand);
      int result = analyzeHand(hand);
      counts[result]++;
   }

   // Results
   const string handTypes[9] = {
      "Straight Flush", "Four of a Kind", "Full House", "Flush",
      "Straight", "Three of a Kind", "Two Pair", "One Pair", "High Card"
   };

   cout << "\n";
   for (int i = 0; i < 9; ++i) {
      double percentage = (numHands > 0) ? (100.0 * counts[i] / numHands) : 0;
      cout << setw(16) << left << handTypes[i]
           << setw(8) << right << fixed << setprecision(5) << percentage << "%"
           << setw(16) << counts[i] << "\n";
   }

   return 0;
}

//card number to its string
string card(int num) {
   const string ranks[] = {"A", "2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K"};
   const string suits = "SHDC";
   return ranks[num / 4] + suits[num % 4];
}


// Shuffles deck with swaps
void shuffle(int deck[], int count) {
   for (int i = 0; i < count; ++i) {
      int pos1 = rand() % DECK_SIZE;
      int pos2 = rand() % DECK_SIZE;
      swap(deck[pos1], deck[pos2]);
   }
}

// Deals first 5 cards
void deal(int deck[], int hand[]) {
   for (int i = 0; i < HAND_SIZE; ++i) {
      hand[i] = deck[i];
   }
}

// Bubble sort
void sort(int hand[]) {
   for (int i = 0; i < HAND_SIZE - 1; ++i) {
      for (int j = 0; j < HAND_SIZE - i - 1; ++j) {
         if (hand[j] > hand[j + 1]) {
            swap(hand[j], hand[j + 1]);
         }
      }
   }
}

//hand types
int analyzeHand(int hand[]) {
   bool flush = true, straight = true;
   int counts[13] = {0};

   for (int i = 0; i < HAND_SIZE; ++i) {
      counts[hand[i] / 4]++;
      if (i > 0) {
         if (hand[i] % 4 != hand[0] % 4) flush = false;
         if (hand[i] / 4 != hand[i - 1] / 4 + 1) straight = false;
      }
   }

   int pairs = 0, threeOfAKind = 0, fourOfAKind = 0;
   for (int count : counts) {
      if (count == 2) pairs++;
      if (count == 3) threeOfAKind++;
      if (count == 4) fourOfAKind++;
   }

   if (straight && flush) return 0; // Straight Flush
   if (fourOfAKind) return 1;       // Four of a Kind
   if (threeOfAKind && pairs == 1) return 2; // Full House
   if (flush) return 3;             // Flush
   if (straight) return 4;          // Straight
   if (threeOfAKind) return 5;      // Three of a Kind
   if (pairs == 2) return 6;        // Two Pair
   if (pairs == 1) return 7;        // One Pair
   return 8;                        // High Card
}

// Displays hand
void displayHand(const int hand[]) {
   for (int i = 0; i < HAND_SIZE; ++i) {
      cout << "  " << card(hand[i]);
   }
   cout << "\n";
}
